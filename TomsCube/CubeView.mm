//
//  CubeView.m
//  TomsCube
//
//  Created by Thomas Bouldin on 3/13/12.
//  Copyright (c) 2012 EspressoBytes. All rights reserved.
//

#import "CubeView.hh"

#define BUFFER_OFFSET(i) ((char *)NULL + (i))

// format: XYZ position & normal of UL LL LR UR corners of each sticker in the
// face enum order definied by the cube model
GLfloat gCubeVertices[] = {
 // FRONT TOP
 0, 3, 3, 0, 0, 1,   0, 2, 3, 0, 0, 1,   1, 2, 3, 0, 0, 1,   1, 3, 3, 0, 0, 1,
 1, 3, 3, 0, 0, 1,   1, 2, 3, 0, 0, 1,   2, 2, 3, 0, 0, 1,   2, 3, 3, 0, 0, 1,
 2, 3, 3, 0, 0, 1,   2, 2, 3, 0, 0, 1,   3, 2, 3, 0, 0, 1,   3, 3, 3, 0, 0, 1,
  
 // FRONT EQUATOR
 0, 2, 3, 0, 0, 1,   0, 1, 3, 0, 0, 1,   1, 1, 3, 0, 0, 1,   1, 2, 3, 0, 0, 1,
 1, 2, 3, 0, 0, 1,   1, 1, 3, 0, 0, 1,   2, 1, 3, 0, 0, 1,   2, 2, 3, 0, 0, 1,
 2, 2, 3, 0, 0, 1,   2, 1, 3, 0, 0, 1,   3, 1, 3, 0, 0, 1,   3, 2, 3, 0, 0, 1,
  
 // FRONT BOTTOM
 0, 1, 3, 0, 0, 1,   0, 0, 3, 0, 0, 1,   1, 0, 0, 0, 0, 1,   1, 1, 0, 0, 0, 1,
 1, 1, 3, 0, 0, 1,   1, 0, 3, 0, 0, 1,   2, 0, 0, 0, 0, 1,   2, 1, 0, 0, 0, 1,
 2, 1, 3, 0, 0, 1,   2, 0, 3, 0, 0, 1,   3, 0, 0, 0, 0, 1,   3, 1, 0, 0, 0, 1,
  
 // RIGHT TOP
 3, 3, 3, 1, 0, 0,   3, 2, 3, 1, 0, 0,   3, 2, 2, 1, 0, 0,   3, 3, 2, 1, 0, 0,
 3, 3, 2, 1, 0, 0,   3, 2, 2, 1, 0, 0,   3, 2, 1, 1, 0, 0,   3, 3, 1, 1, 0, 0,
 3, 3, 1, 1, 0, 0,   3, 2, 1, 1, 0, 0,   3, 2, 0, 1, 0, 0,   3, 3, 0, 1, 0, 0,
  
 // RIGHT EQUATOR
 3, 2, 3, 1, 0, 0,   3, 1, 3, 1, 0, 0,   3, 1, 2, 1, 0, 0,   3, 2, 2, 1, 0, 0,
 3, 2, 2, 1, 0, 0,   3, 1, 2, 1, 0, 0,   3, 1, 1, 1, 0, 0,   3, 2, 1, 1, 0, 0,
 3, 2, 1, 1, 0, 0,   3, 1, 1, 1, 0, 0,   3, 1, 0, 1, 0, 0,   3, 2, 0, 1, 0, 0,

 // RIGHT BOTTOM
 3, 1, 3, 1, 0, 0,   3, 0, 3, 1, 0, 0,   3, 0, 2, 1, 0, 0,   3, 1, 2, 1, 0, 0,
 3, 1, 2, 1, 0, 0,   3, 0, 2, 1, 0, 0,   3, 0, 1, 1, 0, 0,   3, 1, 1, 1, 0, 0,
 3, 1, 1, 1, 0, 0,   3, 0, 1, 1, 0, 0,   3, 0, 0, 1, 0, 0,   3, 1, 0, 1, 0, 0,

 // BACK TOP
 3, 3, 0, 0, 0, -1,  3, 2, 0, 0, 0, -1,  2, 2, 0, 0, 0, -1,  2, 3, 0, 0, 0, -1,
 2, 3, 0, 0, 0, -1,  2, 2, 0, 0, 0, -1,  1, 2, 0, 0, 0, -1,  1, 3, 0, 0, 0, -1,
 1, 3, 0, 0, 0, -1,  1, 2, 0, 0, 0, -1,  0, 2, 0, 0, 0, -1,  0, 3, 0, 0, 0, -1,  
  
 // BACK EQUATOR
 3, 2, 0, 0, 0, -1,  3, 1, 0, 0, 0, -1,  2, 1, 0, 0, 0, -1,  2, 2, 0, 0, 0, -1,
 2, 2, 0, 0, 0, -1,  2, 1, 0, 0, 0, -1,  1, 1, 0, 0, 0, -1,  1, 2, 0, 0, 0, -1,
 1, 2, 0, 0, 0, -1,  1, 1, 0, 0, 0, -1,  0, 1, 0, 0, 0, -1,  0, 2, 0, 0, 0, -1,  

 // BACK BOTTOM
 3, 1, 0, 0, 0, -1,  3, 0, 0, 0, 0, -1,  2, 0, 0, 0, 0, -1,  2, 1, 0, 0, 0, -1,
 2, 1, 0, 0, 0, -1,  2, 0, 0, 0, 0, -1,  1, 0, 0, 0, 0, -1,  1, 1, 0, 0, 0, -1,
 1, 1, 0, 0, 0, -1,  1, 0, 0, 0, 0, -1,  0, 0, 0, 0, 0, -1,  0, 1, 0, 0, 0, -1,  

 // LEFT TOP
 3, 3, 0, -1, 0, 0,  3, 2, 0, -1, 0, 0,  3, 2, 1, -1, 0, 0,  3, 3, 1, -1, 0, 0,
 3, 3, 1, -1, 0, 0,  3, 2, 1, -1, 0, 0,  3, 2, 2, -1, 0, 0,  3, 3, 2, -1, 0, 0,
 3, 3, 2, -1, 0, 0,  3, 2, 2, -1, 0, 0,  3, 2, 3, -1, 0, 0,  3, 3, 3, -1, 0, 0,

 // LEFT EQUATOR
 3, 2, 0, -1, 0, 0,  3, 1, 0, -1, 0, 0,  3, 1, 1, -1, 0, 0,  3, 2, 1, -1, 0, 0,
 3, 2, 1, -1, 0, 0,  3, 1, 1, -1, 0, 0,  3, 1, 2, -1, 0, 0,  3, 2, 2, -1, 0, 0,
 3, 2, 2, -1, 0, 0,  3, 1, 2, -1, 0, 0,  3, 1, 3, -1, 0, 0,  3, 2, 3, -1, 0, 0,

 // LEFT BOTTOM
 3, 1, 0, -1, 0, 0,  3, 0, 0, -1, 0, 0,  3, 0, 1, -1, 0, 0,  3, 1, 1, -1, 0, 0,
 3, 1, 1, -1, 0, 0,  3, 0, 1, -1, 0, 0,  3, 0, 2, -1, 0, 0,  3, 1, 2, -1, 0, 0,
 3, 1, 2, -1, 0, 0,  3, 0, 2, -1, 0, 0,  3, 0, 3, -1, 0, 0,  3, 1, 3, -1, 0, 0,

 // TOP BACK
 0, 3, 0, 0, 1, 0,   0, 3, 1, 0, 1, 0,   1, 3, 1, 0, 1, 0,   1, 3, 0, 0, 1, 0,
 1, 3, 0, 0, 1, 0,   1, 3, 1, 0, 1, 0,   2, 3, 1, 0, 1, 0,   2, 3, 0, 0, 1, 0, 
 2, 3, 0, 0, 1, 0,   2, 3, 1, 0, 1, 0,   3, 3, 1, 0, 1, 0,   3, 3, 0, 0, 1, 0, 

 // TOP STANDING
 0, 3, 1, 0, 1, 0,   0, 3, 2, 0, 1, 0,   1, 3, 2, 0, 1, 0,   1, 3, 1, 0, 1, 0,
 1, 3, 1, 0, 1, 0,   1, 3, 2, 0, 1, 0,   2, 3, 2, 0, 1, 0,   2, 3, 1, 0, 1, 0, 
 2, 3, 1, 0, 1, 0,   2, 3, 2, 0, 1, 0,   3, 3, 2, 0, 1, 0,   3, 3, 1, 0, 1, 0, 

 // TOP FRONT
 0, 3, 2, 0, 1, 0,   0, 3, 3, 0, 1, 0,   1, 3, 3, 0, 1, 0,   1, 3, 2, 0, 1, 0,
 1, 3, 2, 0, 1, 0,   1, 3, 3, 0, 1, 0,   2, 3, 3, 0, 1, 0,   2, 3, 2, 0, 1, 0, 
 2, 3, 2, 0, 1, 0,   2, 3, 3, 0, 1, 0,   3, 3, 3, 0, 1, 0,   3, 3, 2, 0, 1, 0, 

 // BOTTOM FRONT
 0, 0, 3, 0, -1, 0,  0, 0, 2, 0, -1, 0,  1, 0, 2, 0, -1, 0,  1, 0, 3, 0, -1, 0,
 1, 0, 3, 0, -1, 0,  1, 0, 2, 0, -1, 0,  2, 0, 2, 0, -1, 0,  2, 0, 3, 0, -1, 0,
 2, 0, 3, 0, -1, 0,  2, 0, 2, 0, -1, 0,  3, 0, 2, 0, -1, 0,  3, 0, 3, 0, -1, 0,
  
 // BOTTOM STANDING
 0, 0, 2, 0, -1, 0,  0, 0, 1, 0, -1, 0,  1, 0, 1, 0, -1, 0,  1, 0, 2, 0, -1, 0,
 1, 0, 2, 0, -1, 0,  1, 0, 1, 0, -1, 0,  2, 0, 1, 0, -1, 0,  2, 0, 2, 0, -1, 0,
 2, 0, 2, 0, -1, 0,  2, 0, 1, 0, -1, 0,  3, 0, 1, 0, -1, 0,  3, 0, 2, 0, -1, 0,

 // BOTTOM BACK
 0, 0, 1, 0, -1, 0,  0, 0, 0, 0, -1, 0,  1, 0, 0, 0, -1, 0,  1, 0, 1, 0, -1, 0,
 1, 0, 1, 0, -1, 0,  1, 0, 0, 0, -1, 0,  2, 0, 0, 0, -1, 0,  2, 0, 1, 0, -1, 0,
 2, 0, 1, 0, -1, 0,  2, 0, 0, 0, -1, 0,  3, 0, 0, 0, -1, 0,  3, 0, 1, 0, -1, 0,
};

@implementation CubeView

@synthesize context = _context;

- (id) initWithContext:(EAGLContext*) context
{
  self = [super init];
  if (self)
  {
    _cube = new Cube();
    _context = context;
  }
  return self;
}

- (void) dealloc
{
  delete _cube;
}

- (void) setUpOpenGL
{
  glGenVertexArraysOES(1, &_vertexArray);
  glBindVertexArrayOES(_vertexArray);
  
  glGenBuffers(1, &_vertexBuffer);
  glBindBuffer(GL_ARRAY_BUFFER, _vertexBuffer);
  glBufferData(GL_ARRAY_BUFFER, sizeof(gCubeVertices), gCubeVertices, GL_STATIC_DRAW);
  
  glEnableVertexAttribArray(GLKVertexAttribPosition);
  glVertexAttribPointer(GLKVertexAttribPosition, 3, GL_FLOAT, GL_FALSE, 24, BUFFER_OFFSET(0));
  glEnableVertexAttribArray(GLKVertexAttribNormal);
  glVertexAttribPointer(GLKVertexAttribNormal, 3, GL_FLOAT, GL_FALSE, 24, BUFFER_OFFSET(12));
  
  glBindVertexArrayOES(0);
}
- (void) draw
{
}

@end
